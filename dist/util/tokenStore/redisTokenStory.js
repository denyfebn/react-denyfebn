"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _config = _interopRequireDefault(require("../../config"));
var _db = _interopRequireDefault(require("../db/redis/db"));
var _functions = require("../functions");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
class RedisTokenStore {
  constructor(client) {
    this.client = client;
    let prefix = _config.default.db.redisPrefix || '';
    if (prefix === 'docker') {
      prefix = (0, _functions.getIPAddress)();
    }
  }
  tokenStore = {
    getToken: sessionName => new Promise((resolve, reject) => {
      _db.default.get(this.prefix + sessionName, (err, reply) => {
        if (err) {
          return reject(err);
        }
        const object = JSON.parse(reply);
        if (object) {
          if (object.config && Object.keys(this.client.config).length === 0) this.client.config = object.config;
          if (object.webhook && Object.keys(this.client.config).length === 0) this.client.config.webhook = object.webhook;
        }
        resolve(object);
      });
    }),
    setToken: (sessionName, tokenData) => new Promise(resolve => {
      tokenData.sessionName = sessionName;
      tokenData.config = this.client.config;
      _db.default.set(this.prefix + sessionName, JSON.stringify(tokenData), err => {
        return resolve(err ? false : true);
      });
    }),
    removeToken: sessionName => new Promise(resolve => {
      _db.default.del(this.prefix + sessionName, err => {
        return resolve(err ? false : true);
      });
    }),
    listTokens: () => new Promise(resolve => {
      _db.default.keys(this.prefix + '*', (err, keys) => {
        if (err) {
          return resolve([]);
        }
        keys.forEach((item, indice) => {
          if (this.prefix !== '' && item.includes(this.prefix)) {
            keys[indice] = item.substring(item.indexOf(this.prefix) + this.prefix.length);
          }
        });
        return resolve(keys);
      });
    })
  };
}
var _default = exports.default = RedisTokenStore;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY29uZmlnIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfZGIiLCJfZnVuY3Rpb25zIiwiZSIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiUmVkaXNUb2tlblN0b3JlIiwiY29uc3RydWN0b3IiLCJjbGllbnQiLCJwcmVmaXgiLCJjb25maWciLCJkYiIsInJlZGlzUHJlZml4IiwiZ2V0SVBBZGRyZXNzIiwidG9rZW5TdG9yZSIsImdldFRva2VuIiwic2Vzc2lvbk5hbWUiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInJlZGlzQ2xpZW50IiwiZ2V0IiwiZXJyIiwicmVwbHkiLCJvYmplY3QiLCJKU09OIiwicGFyc2UiLCJPYmplY3QiLCJrZXlzIiwibGVuZ3RoIiwid2ViaG9vayIsInNldFRva2VuIiwidG9rZW5EYXRhIiwic2V0Iiwic3RyaW5naWZ5IiwicmVtb3ZlVG9rZW4iLCJkZWwiLCJsaXN0VG9rZW5zIiwiZm9yRWFjaCIsIml0ZW0iLCJpbmRpY2UiLCJpbmNsdWRlcyIsInN1YnN0cmluZyIsImluZGV4T2YiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXRpbC90b2tlblN0b3JlL3JlZGlzVG9rZW5TdG9yeS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY29uZmlnIGZyb20gJy4uLy4uL2NvbmZpZyc7XG5pbXBvcnQgcmVkaXNDbGllbnQgZnJvbSAnLi4vZGIvcmVkaXMvZGInO1xuaW1wb3J0IHsgZ2V0SVBBZGRyZXNzIH0gZnJvbSAnLi4vZnVuY3Rpb25zJztcblxuY2xhc3MgUmVkaXNUb2tlblN0b3JlIHtcbiAgZGVjbGFyZSBjbGllbnQ6IGFueTtcbiAgZGVjbGFyZSBwcmVmaXg6IHN0cmluZztcbiAgY29uc3RydWN0b3IoY2xpZW50OiBhbnkpIHtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcblxuICAgIGxldCBwcmVmaXggPSBjb25maWcuZGIucmVkaXNQcmVmaXggfHwgJyc7XG4gICAgaWYgKHByZWZpeCA9PT0gJ2RvY2tlcicpIHtcbiAgICAgIHByZWZpeCA9IGdldElQQWRkcmVzcygpO1xuICAgIH1cbiAgfVxuICB0b2tlblN0b3JlID0ge1xuICAgIGdldFRva2VuOiAoc2Vzc2lvbk5hbWU6IHN0cmluZykgPT5cbiAgICAgIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgKHJlZGlzQ2xpZW50IGFzIGFueSkuZ2V0KFxuICAgICAgICAgIHRoaXMucHJlZml4ICsgc2Vzc2lvbk5hbWUsXG4gICAgICAgICAgKGVycjogYW55LCByZXBseTogYW55KSA9PiB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgIHJldHVybiByZWplY3QoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG9iamVjdCA9IEpTT04ucGFyc2UocmVwbHkpO1xuICAgICAgICAgICAgaWYgKG9iamVjdCkge1xuICAgICAgICAgICAgICBpZiAob2JqZWN0LmNvbmZpZyAmJiBPYmplY3Qua2V5cyh0aGlzLmNsaWVudC5jb25maWcpLmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgICAgICB0aGlzLmNsaWVudC5jb25maWcgPSBvYmplY3QuY29uZmlnO1xuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgb2JqZWN0LndlYmhvb2sgJiZcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyh0aGlzLmNsaWVudC5jb25maWcpLmxlbmd0aCA9PT0gMFxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgdGhpcy5jbGllbnQuY29uZmlnLndlYmhvb2sgPSBvYmplY3Qud2ViaG9vaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc29sdmUob2JqZWN0KTtcbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICB9KSxcbiAgICBzZXRUb2tlbjogKHNlc3Npb25OYW1lOiBzdHJpbmcsIHRva2VuRGF0YTogYW55KSA9PlxuICAgICAgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgdG9rZW5EYXRhLnNlc3Npb25OYW1lID0gc2Vzc2lvbk5hbWU7XG4gICAgICAgIHRva2VuRGF0YS5jb25maWcgPSB0aGlzLmNsaWVudC5jb25maWc7XG4gICAgICAgIChyZWRpc0NsaWVudCBhcyBhbnkpLnNldChcbiAgICAgICAgICB0aGlzLnByZWZpeCArIHNlc3Npb25OYW1lLFxuICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHRva2VuRGF0YSksXG4gICAgICAgICAgKGVycjogYW55KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShlcnIgPyBmYWxzZSA6IHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgIH0pLFxuICAgIHJlbW92ZVRva2VuOiAoc2Vzc2lvbk5hbWU6IHN0cmluZykgPT5cbiAgICAgIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgIChyZWRpc0NsaWVudCBhcyBhbnkpLmRlbCh0aGlzLnByZWZpeCArIHNlc3Npb25OYW1lLCAoZXJyOiBhbnkpID0+IHtcbiAgICAgICAgICByZXR1cm4gcmVzb2x2ZShlcnIgPyBmYWxzZSA6IHRydWUpO1xuICAgICAgICB9KTtcbiAgICAgIH0pLFxuICAgIGxpc3RUb2tlbnM6ICgpID0+XG4gICAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAocmVkaXNDbGllbnQgYXMgYW55KS5rZXlzKHRoaXMucHJlZml4ICsgJyonLCAoZXJyOiBhbnksIGtleXM6IGFueSkgPT4ge1xuICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKFtdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAga2V5cy5mb3JFYWNoKChpdGVtOiBhbnksIGluZGljZTogYW55KSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmVmaXggIT09ICcnICYmIGl0ZW0uaW5jbHVkZXModGhpcy5wcmVmaXgpKSB7XG4gICAgICAgICAgICAgIGtleXNbaW5kaWNlXSA9IGl0ZW0uc3Vic3RyaW5nKFxuICAgICAgICAgICAgICAgIGl0ZW0uaW5kZXhPZih0aGlzLnByZWZpeCkgKyB0aGlzLnByZWZpeC5sZW5ndGhcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gcmVzb2x2ZShrZXlzKTtcbiAgICAgICAgfSk7XG4gICAgICB9KSxcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVkaXNUb2tlblN0b3JlO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxPQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxHQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxVQUFBLEdBQUFGLE9BQUE7QUFBNEMsU0FBQUQsdUJBQUFJLENBQUEsV0FBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQSxLQUFBRSxPQUFBLEVBQUFGLENBQUE7QUFFNUMsTUFBTUcsZUFBZSxDQUFDO0VBR3BCQyxXQUFXQSxDQUFDQyxNQUFXLEVBQUU7SUFDdkIsSUFBSSxDQUFDQSxNQUFNLEdBQUdBLE1BQU07SUFFcEIsSUFBSUMsTUFBTSxHQUFHQyxlQUFNLENBQUNDLEVBQUUsQ0FBQ0MsV0FBVyxJQUFJLEVBQUU7SUFDeEMsSUFBSUgsTUFBTSxLQUFLLFFBQVEsRUFBRTtNQUN2QkEsTUFBTSxHQUFHLElBQUFJLHVCQUFZLEVBQUMsQ0FBQztJQUN6QjtFQUNGO0VBQ0FDLFVBQVUsR0FBRztJQUNYQyxRQUFRLEVBQUdDLFdBQW1CLElBQzVCLElBQUlDLE9BQU8sQ0FBQyxDQUFDQyxPQUFPLEVBQUVDLE1BQU0sS0FBSztNQUM5QkMsV0FBVyxDQUFTQyxHQUFHLENBQ3RCLElBQUksQ0FBQ1osTUFBTSxHQUFHTyxXQUFXLEVBQ3pCLENBQUNNLEdBQVEsRUFBRUMsS0FBVSxLQUFLO1FB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