"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _token = _interopRequireDefault(require("./model/token"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
class MongodbTokenStore {
  constructor(client) {
    this.client = client;
  }
  tokenStore = {
    getToken: async sessionName => {
      let result = await _token.default.findOne({
        sessionName
      });
      if (result === null) return result;
      result = JSON.parse(JSON.stringify(result));
      result.config = JSON.parse(result.config);
      result.config.webhook = result.webhook;
      this.client.config = result.config;
      return result;
    },
    setToken: async (sessionName, tokenData) => {
      const token = new _token.default(tokenData);
      token.sessionName = sessionName;
      token.webhook = this.client.config.webhook;
      token.config = JSON.stringify(this.client.config);
      const tk = await _token.default.findOne({
        sessionName
      });
      if (tk) {
        token._id = tk._id;
        return (await _token.default.updateOne({
          _id: tk._id
        }, token)) ? true : false;
      } else {
        return (await token.save()) ? true : false;
      }
    },
    removeToken: async sessionName => {
      return (await _token.default.deleteOne({
        sessionName
      })) ? true : false;
    },
    listTokens: async () => {
      const result = await _token.default.find();
      return result.map(m => m.sessionName);
    }
  };
}
var _default = exports.default = MongodbTokenStore;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdG9rZW4iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsImUiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIk1vbmdvZGJUb2tlblN0b3JlIiwiY29uc3RydWN0b3IiLCJjbGllbnQiLCJ0b2tlblN0b3JlIiwiZ2V0VG9rZW4iLCJzZXNzaW9uTmFtZSIsInJlc3VsdCIsIlRva2VuIiwiZmluZE9uZSIsIkpTT04iLCJwYXJzZSIsInN0cmluZ2lmeSIsImNvbmZpZyIsIndlYmhvb2siLCJzZXRUb2tlbiIsInRva2VuRGF0YSIsInRva2VuIiwidGsiLCJfaWQiLCJ1cGRhdGVPbmUiLCJzYXZlIiwicmVtb3ZlVG9rZW4iLCJkZWxldGVPbmUiLCJsaXN0VG9rZW5zIiwiZmluZCIsIm1hcCIsIm0iLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXRpbC90b2tlblN0b3JlL21vbmdvZGJUb2tlblN0b3J5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUb2tlbiBmcm9tICcuL21vZGVsL3Rva2VuJztcblxuY2xhc3MgTW9uZ29kYlRva2VuU3RvcmUge1xuICBkZWNsYXJlIGNsaWVudDogYW55O1xuICBjb25zdHJ1Y3RvcihjbGllbnQ6IGFueSkge1xuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICB9XG4gIHRva2VuU3RvcmUgPSB7XG4gICAgZ2V0VG9rZW46IGFzeW5jIChzZXNzaW9uTmFtZTogc3RyaW5nKSA9PiB7XG4gICAgICBsZXQgcmVzdWx0ID0gYXdhaXQgKFRva2VuIGFzIGFueSkuZmluZE9uZSh7IHNlc3Npb25OYW1lIH0pO1xuICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCkgcmV0dXJuIHJlc3VsdDtcbiAgICAgIHJlc3VsdCA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkocmVzdWx0KSk7XG4gICAgICByZXN1bHQuY29uZmlnID0gSlNPTi5wYXJzZShyZXN1bHQuY29uZmlnKTtcbiAgICAgIHJlc3VsdC5jb25maWcud2ViaG9vayA9IHJlc3VsdC53ZWJob29rO1xuICAgICAgdGhpcy5jbGllbnQuY29uZmlnID0gcmVzdWx0LmNvbmZpZztcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcbiAgICBzZXRUb2tlbjogYXN5bmMgKHNlc3Npb25OYW1lOiBhbnksIHRva2VuRGF0YTogYW55KSA9PiB7XG4gICAgICBjb25zdCB0b2tlbiA9IG5ldyAoVG9rZW4gYXMgYW55KSh0b2tlbkRhdGEpO1xuICAgICAgdG9rZW4uc2Vzc2lvbk5hbWUgPSBzZXNzaW9uTmFtZTtcbiAgICAgIHRva2VuLndlYmhvb2sgPSB0aGlzLmNsaWVudC5jb25maWcud2ViaG9vaztcbiAgICAgIHRva2VuLmNvbmZpZyA9IEpTT04uc3RyaW5naWZ5KHRoaXMuY2xpZW50LmNvbmZpZyk7XG5cbiAgICAgIGNvbnN0IHRrID0gYXdhaXQgKFRva2VuIGFzIGFueSkuZmluZE9uZSh7IHNlc3Npb25OYW1lIH0pO1xuXG4gICAgICBpZiAodGspIHtcbiAgICAgICAgdG9rZW4uX2lkID0gdGsuX2lkO1xuICAgICAgICByZXR1cm4gKGF3YWl0IChUb2tlbiBhcyBhbnkpLnVwZGF0ZU9uZSh7IF9pZDogdGsuX2lkIH0sIHRva2VuKSlcbiAgICAgICAgICA/IHRydWVcbiAgICAgICAgICA6IGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIChhd2FpdCB0b2tlbi5zYXZlKCkpID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgfVxuICAgIH0sXG4gICAgcmVtb3ZlVG9rZW46IGFzeW5jIChzZXNzaW9uTmFtZTogc3RyaW5nKSA9PiB7XG4gICAgICByZXR1cm4gKGF3YWl0IChUb2tlbiBhcyBhbnkpLmRlbGV0ZU9uZSh7IHNlc3Npb25OYW1lIH0pKSA/IHRydWUgOiBmYWxzZTtcbiAgICB9LFxuICAgIGxpc3RUb2tlbnM6IGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IChUb2tlbiBhcyBhbnkpLmZpbmQoKTtcbiAgICAgIHJldHVybiByZXN1bHQubWFwKChtOiBhbnkpID0+IG0uc2Vzc2lvbk5hbWUpO1xuICAgIH0sXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IE1vbmdvZGJUb2tlblN0b3JlO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFBa0MsU0FBQUQsdUJBQUFFLENBQUEsV0FBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQSxLQUFBRSxPQUFBLEVBQUFGLENBQUE7QUFFbEMsTUFBTUcsaUJBQWlCLENBQUM7RUFFdEJDLFdBQVdBLENBQUNDLE1BQVcsRUFBRTtJQUN2QixJQUFJLENBQUNBLE1BQU0sR0FBR0EsTUFBTTtFQUN0QjtFQUNBQyxVQUFVLEdBQUc7SUFDWEMsUUFBUSxFQUFFLE1BQU9DLFdBQW1CLElBQUs7TUFDdkMsSUFBSUMsTUFBTSxHQUFHLE1BQU9DLGNBQUssQ0FBU0MsT0FBTyxDQUFDO1FBQUVIO01BQVksQ0FBQyxDQUFDO01BQzFELElBQUlDLE1BQU0sS0FBSyxJQUFJLEVBQUUsT0FBT0EsTUFBTTtNQUNsQ0EsTUFBTSxHQUFHRyxJQUFJLENBQUNDLEtBQUssQ0FBQ0QsSUFBSSxDQUFDRSxTQUFTLENBQUNMLE1BQU0sQ0FBQyxDQUFDO01BQzNDQSxNQUFNLENBQUNNLE1BQU0sR0FBR0gsSUFBSSxDQUFDQyxLQUFLLENBQUNKLE1BQU0sQ0FBQ00sTUFBTSxDQUFDO01BQ3pDTixNQUFNLENBQUNNLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHUCxNQUFNLENBQUNPLE9BQU87TUFDdEMsSUFBSSxDQUFDWCxNQUFNLENBQUNVLE1BQU0sR0FBR04sTUFBTSxDQUFDTSxNQUFNO01BQ2xDLE9BQU9OLE1BQU07SUFDZixDQUFDO0lBQ0RRLFFBQVEsRUFBRSxNQUFBQSxDQUFPVCxXQUFnQixFQUFFVSxTQUFjLEtBQUs7TUFDcEQsTUFBTUMsS0FBSyxHQUFHLElBQUtULGNBQUssQ0FBU1EsU0FBUyxDQUFDO01BQzNDQyxLQUFLLENBQUNYLFdBQVcsR0FBR0EsV0FBVztNQUMvQlcsS0FBSyxDQUFDSCxPQUFPLEdBQUcsSUFBSSxDQUFDWCxNQUFNLENBQUNVLE1BQU0sQ0FBQ0MsT0FBTztNQUMxQ0csS0FBSyxDQUFDSixNQUFNLEdBQUdILElBQUksQ0FBQ0UsU0FBUyxDQUFDLElBQUksQ0FBQ1QsTUFBTSxDQUFDVSxNQUFNLENBQUM7TUFFakQsTUFBTUssRUFBRSxHQUFHLE1BQU9WLGNBQUssQ0FBU0MsT0FBTyxDQUFDO1FBQUVIO01BQVksQ0FBQyxDQUFDO01BRXhELElBQUlZLEVBQUUsRUFBRTtRQUNORCxLQUFLLENBQUNFLEdBQUcsR0FBR0QsRUFBRSxDQUFDQyxHQUFHO1FBQ2xCLE9BQU8sQ0FBQyxNQUFPWCxjQUFLLENBQVNZLFNBQVMsQ0FBQztVQUFFRCxHQUFHLEVBQUVELEVBQUUsQ0FBQ0M7UUFBSSxDQUFDLEVBQUVGLEtBQUssQ0FBQyxJQUMxRCxJQUFJLEdBQ0osS0FBSztNQUNYLENBQUMsTUFBTTtRQUNMLE9BQU8sQ0FBQyxNQUFNQSxLQUFLLENBQUNJLElBQUksQ0FBQyxDQUFDLElBQUksSUFBSSxHQUFHLEtBQUs7TUFDNUM7SUFDRixDQUFDO0lBQ0RDLFdBQVcsRUFBRSxNQUFPaEIsV0FBbUIsSUFBSztNQUMxQyxPQUFPLENBQUMsTUFBT0UsY0FBSyxDQUFTZSxTQUFTLENBQUM7UUFBRWpCO01BQVksQ0FBQyxDQUFDLElBQUksSUFBSSxHQUFHLEtBQUs7SUFDekUsQ0FBQztJQUNEa0IsVUFBVSxFQUFFLE1BQUFBLENBQUEsS0FBWTtNQUN0QixNQUFNakIsTUFBTSxHQUFHLE1BQU9DLGNBQUssQ0FBU2lCLElBQUksQ0FBQyxDQUFDO01BQzFDLE9BQU9sQixNQUFNLENBQUNtQixHQUFHLENBQUVDLENBQU0sSUFBS0EsQ0FBQyxDQUFDckIsV0FBVyxDQUFDO0lBQzlDO0VBQ0YsQ0FBQztBQUNIO0FBQUMsSUFBQXNCLFFBQUEsR0FBQUMsT0FBQSxDQUFBN0IsT0FBQSxHQUVjQyxpQkFBaUIiLCJpZ25vcmVMaXN0IjpbXX0=