"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _bcrypt = _interopRequireDefault(require("bcrypt"));
var _sessionUtil = require("../util/sessionUtil");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
/*
 * Copyright 2021 WPPConnect Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function formatSession(session) {
  return session.split(':')[0];
}
const verifyToken = (req, res, next) => {
  const secureToken = req.serverOptions.secretKey;
  const {
    session
  } = req.params;
  const {
    authorization: token
  } = req.headers;
  if (!session) return res.status(401).send({
    message: 'Session not informed'
  });
  try {
    let tokenDecrypt = '';
    let sessionDecrypt = '';
    try {
      sessionDecrypt = session.split(':')[0];
      tokenDecrypt = session.split(':')[1].replace(/_/g, '/').replace(/-/g, '+');
    } catch (error) {
      try {
        if (token && token !== '' && token.split(' ').length > 0) {
          const token_value = token.split(' ')[1];
          if (token_value) tokenDecrypt = token_value.replace(/_/g, '/').replace(/-/g, '+');else return res.status(401).json({
            message: 'Token is not present. Check your header and try again'
          });
        } else {
          return res.status(401).json({
            message: 'Token is not present. Check your header and try again'
          });
        }
      } catch (e) {
        req.logger.error(e);
        return res.status(401).json({
          error: 'Check that a Session and Token are correct',
          message: error
        });
      }
    }
    _bcrypt.default.compare(sessionDecrypt + secureToken, tokenDecrypt, function (err, result) {
      if (result) {
        req.session = formatSession(req.params.session);
        req.token = tokenDecrypt;
        req.client = _sessionUtil.clientsArray[req.session];
        next();
      } else {
        return res.status(401).json({
          error: 'Check that the Session and Token are correct'
        });
      }
    });
  } catch (error) {
    req.logger.error(error);
    return res.status(401).json({
      error: 'Check that the Session and Token are correct.',
      message: error
    });
  }
};
var _default = exports.default = verifyToken;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYmNyeXB0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfc2Vzc2lvblV0aWwiLCJlIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJmb3JtYXRTZXNzaW9uIiwic2Vzc2lvbiIsInNwbGl0IiwidmVyaWZ5VG9rZW4iLCJyZXEiLCJyZXMiLCJuZXh0Iiwic2VjdXJlVG9rZW4iLCJzZXJ2ZXJPcHRpb25zIiwic2VjcmV0S2V5IiwicGFyYW1zIiwiYXV0aG9yaXphdGlvbiIsInRva2VuIiwiaGVhZGVycyIsInN0YXR1cyIsInNlbmQiLCJtZXNzYWdlIiwidG9rZW5EZWNyeXB0Iiwic2Vzc2lvbkRlY3J5cHQiLCJyZXBsYWNlIiwiZXJyb3IiLCJsZW5ndGgiLCJ0b2tlbl92YWx1ZSIsImpzb24iLCJsb2dnZXIiLCJiY3J5cHQiLCJjb21wYXJlIiwiZXJyIiwicmVzdWx0IiwiY2xpZW50IiwiY2xpZW50c0FycmF5IiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL21pZGRsZXdhcmUvYXV0aC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IDIwMjEgV1BQQ29ubmVjdCBUZWFtXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgYmNyeXB0IGZyb20gJ2JjcnlwdCc7XG5pbXBvcnQgeyBOZXh0RnVuY3Rpb24sIFJlcXVlc3QsIFJlc3BvbnNlIH0gZnJvbSAnZXhwcmVzcyc7XG5cbmltcG9ydCB7IGNsaWVudHNBcnJheSB9IGZyb20gJy4uL3V0aWwvc2Vzc2lvblV0aWwnO1xuXG5mdW5jdGlvbiBmb3JtYXRTZXNzaW9uKHNlc3Npb246IHN0cmluZykge1xuICByZXR1cm4gc2Vzc2lvbi5zcGxpdCgnOicpWzBdO1xufVxuXG5jb25zdCB2ZXJpZnlUb2tlbiA9IChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UsIG5leHQ6IE5leHRGdW5jdGlvbik6IGFueSA9PiB7XG4gIGNvbnN0IHNlY3VyZVRva2VuID0gcmVxLnNlcnZlck9wdGlvbnMuc2VjcmV0S2V5O1xuXG4gIGNvbnN0IHsgc2Vzc2lvbiB9ID0gcmVxLnBhcmFtcztcbiAgY29uc3QgeyBhdXRob3JpemF0aW9uOiB0b2tlbiB9ID0gcmVxLmhlYWRlcnM7XG4gIGlmICghc2Vzc2lvbilcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLnNlbmQoeyBtZXNzYWdlOiAnU2Vzc2lvbiBub3QgaW5mb3JtZWQnIH0pO1xuXG4gIHRyeSB7XG4gICAgbGV0IHRva2VuRGVjcnlwdCA9ICcnO1xuICAgIGxldCBzZXNzaW9uRGVjcnlwdCA9ICcnO1xuXG4gICAgdHJ5IHtcbiAgICAgIHNlc3Npb25EZWNyeXB0ID0gc2Vzc2lvbi5zcGxpdCgnOicpWzBdO1xuICAgICAgdG9rZW5EZWNyeXB0ID0gc2Vzc2lvblxuICAgICAgICAuc3BsaXQoJzonKVsxXVxuICAgICAgICAucmVwbGFjZSgvXy9nLCAnLycpXG4gICAgICAgIC5yZXBsYWNlKC8tL2csICcrJyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICh0b2tlbiAmJiB0b2tlbiAhPT0gJycgJiYgdG9rZW4uc3BsaXQoJyAnKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgY29uc3QgdG9rZW5fdmFsdWUgPSB0b2tlbi5zcGxpdCgnICcpWzFdO1xuICAgICAgICAgIGlmICh0b2tlbl92YWx1ZSlcbiAgICAgICAgICAgIHRva2VuRGVjcnlwdCA9IHRva2VuX3ZhbHVlLnJlcGxhY2UoL18vZywgJy8nKS5yZXBsYWNlKC8tL2csICcrJyk7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHtcbiAgICAgICAgICAgICAgbWVzc2FnZTogJ1Rva2VuIGlzIG5vdCBwcmVzZW50LiBDaGVjayB5b3VyIGhlYWRlciBhbmQgdHJ5IGFnYWluJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih7XG4gICAgICAgICAgICBtZXNzYWdlOiAnVG9rZW4gaXMgbm90IHByZXNlbnQuIENoZWNrIHlvdXIgaGVhZGVyIGFuZCB0cnkgYWdhaW4nLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlcS5sb2dnZXIuZXJyb3IoZSk7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih7XG4gICAgICAgICAgZXJyb3I6ICdDaGVjayB0aGF0IGEgU2Vzc2lvbiBhbmQgVG9rZW4gYXJlIGNvcnJlY3QnLFxuICAgICAgICAgIG1lc3NhZ2U6IGVycm9yLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBiY3J5cHQuY29tcGFyZShcbiAgICAgIHNlc3Npb25EZWNyeXB0ICsgc2VjdXJlVG9rZW4sXG4gICAgICB0b2tlbkRlY3J5cHQsXG4gICAgICBmdW5jdGlvbiAoZXJyLCByZXN1bHQpIHtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIHJlcS5zZXNzaW9uID0gZm9ybWF0U2Vzc2lvbihyZXEucGFyYW1zLnNlc3Npb24pO1xuICAgICAgICAgIHJlcS50b2tlbiA9IHRva2VuRGVjcnlwdDtcbiAgICAgICAgICByZXEuY2xpZW50ID0gY2xpZW50c0FycmF5W3JlcS5zZXNzaW9uXTtcbiAgICAgICAgICBuZXh0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHJlc1xuICAgICAgICAgICAgLnN0YXR1cyg0MDEpXG4gICAgICAgICAgICAuanNvbih7IGVycm9yOiAnQ2hlY2sgdGhhdCB0aGUgU2Vzc2lvbiBhbmQgVG9rZW4gYXJlIGNvcnJlY3QnIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXEubG9nZ2VyLmVycm9yKGVycm9yKTtcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oe1xuICAgICAgZXJyb3I6ICdDaGVjayB0aGF0IHRoZSBTZXNzaW9uIGFuZCBUb2tlbiBhcmUgY29ycmVjdC4nLFxuICAgICAgbWVzc2FnZTogZXJyb3IsXG4gICAgfSk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHZlcmlmeVRva2VuO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFlQSxJQUFBQSxPQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFHQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFBbUQsU0FBQUQsdUJBQUFHLENBQUEsV0FBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQSxLQUFBRSxPQUFBLEVBQUFGLENBQUE7QUFsQm5EO0FBQ0E7QUFDQTtB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